syntax = "proto3";

package tospb;
option go_package = "schema;pb";

message Menu {
  repeated MenuItemKind item_kinds = 1;
}

message MenuItemKind {
  int64 id = 1;
  string name = 2;
  repeated MenuItem items = 3;
  repeated MenuOptionKind option_kinds = 4;
}

message MenuItem {
  int64 id = 1;
  string name = 2;
  int64 price = 3;
  int64 item_kind_id = 4;
}

message MenuOptionKind {
  int64 id = 1;
  string name = 2;
  int64 item_kind_id = 3;
  repeated MenuOption options = 4;
}

message MenuOption {
  int64 id = 1;
  string name = 2;
  int64 price = 3;
  int64 option_kind_id = 4;
}

message Order {
  int64 id = 1;
  string name = 2;
  repeated OrderItem items = 3;
  int64 total = 4;
  string status = 5;
  // @inject_tag: db:"time_ordered"
  string time_ordered = 6;
  // @inject_tag: db:"time_complete"
  string time_complete = 7;
}

message OrderItem {
  int64 item_id = 1;
  int64 price = 2;
  repeated OrderOption options = 3;
}

message OrderOption {
  int64 id = 1;
  int64 order_id = 2;
  int64 option_id = 3;
  int64 order_item_id = 4;
  int64 price = 5;
}

message Response { string response = 1; }

message CreateMenuItemResponse { int64 id = 1; }

message CompleteOrderRequest { int64 id = 1; }

message OrdersRequest { string request = 1; }

message OrdersResponse { repeated Order orders = 1; }

message Empty {}

message DeleteMenuItemRequest { int64 id = 1; }

// All unary requests
service MenuService {
  rpc GetMenu(Empty) returns (Menu) {}
  rpc CreateMenuItem(MenuItem) returns (CreateMenuItemResponse) {}
  rpc UpdateMenuItem(MenuItem) returns (Response) {};
  rpc DeleteMenuItem(DeleteMenuItemRequest) returns (Response) {};
  rpc CreateMenuItemOption(MenuOption) returns (Response) {};
}

service OrderService {
  rpc SubmitOrder(Order) returns (Response) {};
  rpc ActiveOrders(Empty) returns (OrdersResponse) {};
  rpc CompleteOrder(CompleteOrderRequest) returns (Response) {};
  rpc SubscribeToOrders(Empty) returns (stream Order) {};
}

message Ping {
  string message = 1;
  float delaySeconds = 2;
}

message Pong {
  string message = 1;
}

service PingService {
  rpc SendPing(Ping) returns (Pong) {};
}
