// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Item is an object representing the database table.
type Item struct {
	ID        null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Deleted   null.Int64 `boil:"deleted" json:"deleted,omitempty" toml:"deleted" yaml:"deleted,omitempty"`
	Available null.Int64 `boil:"available" json:"available,omitempty" toml:"available" yaml:"available,omitempty"`
	KindID    int64      `boil:"kind_id" json:"kindID" toml:"kindID" yaml:"kindID"`
	Name      string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Price     int64      `boil:"price" json:"price" toml:"price" yaml:"price"`

	R *itemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L itemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ItemColumns = struct {
	ID        string
	Deleted   string
	Available string
	KindID    string
	Name      string
	Price     string
}{
	ID:        "id",
	Deleted:   "deleted",
	Available: "available",
	KindID:    "kind_id",
	Name:      "name",
	Price:     "price",
}

// Generated where

var ItemWhere = struct {
	ID        whereHelpernull_Int64
	Deleted   whereHelpernull_Int64
	Available whereHelpernull_Int64
	KindID    whereHelperint64
	Name      whereHelperstring
	Price     whereHelperint64
}{
	ID:        whereHelpernull_Int64{field: "\"items\".\"id\""},
	Deleted:   whereHelpernull_Int64{field: "\"items\".\"deleted\""},
	Available: whereHelpernull_Int64{field: "\"items\".\"available\""},
	KindID:    whereHelperint64{field: "\"items\".\"kind_id\""},
	Name:      whereHelperstring{field: "\"items\".\"name\""},
	Price:     whereHelperint64{field: "\"items\".\"price\""},
}

// ItemRels is where relationship names are stored.
var ItemRels = struct {
	Kind             string
	ItemOption       string
	SideItemItemSide string
	ItemSide         string
	OrderItems       string
}{
	Kind:             "Kind",
	ItemOption:       "ItemOption",
	SideItemItemSide: "SideItemItemSide",
	ItemSide:         "ItemSide",
	OrderItems:       "OrderItems",
}

// itemR is where relationships are stored.
type itemR struct {
	Kind             *ItemKind      `boil:"Kind" json:"Kind" toml:"Kind" yaml:"Kind"`
	ItemOption       *ItemOption    `boil:"ItemOption" json:"ItemOption" toml:"ItemOption" yaml:"ItemOption"`
	SideItemItemSide *ItemSide      `boil:"SideItemItemSide" json:"SideItemItemSide" toml:"SideItemItemSide" yaml:"SideItemItemSide"`
	ItemSide         *ItemSide      `boil:"ItemSide" json:"ItemSide" toml:"ItemSide" yaml:"ItemSide"`
	OrderItems       OrderItemSlice `boil:"OrderItems" json:"OrderItems" toml:"OrderItems" yaml:"OrderItems"`
}

// NewStruct creates a new relationship struct
func (*itemR) NewStruct() *itemR {
	return &itemR{}
}

// itemL is where Load methods for each relationship are stored.
type itemL struct{}

var (
	itemAllColumns            = []string{"id", "deleted", "available", "kind_id", "name", "price"}
	itemColumnsWithoutDefault = []string{}
	itemColumnsWithDefault    = []string{"id", "deleted", "available", "kind_id", "name", "price"}
	itemPrimaryKeyColumns     = []string{"id"}
)

type (
	// ItemSlice is an alias for a slice of pointers to Item.
	// This should generally be used opposed to []Item.
	ItemSlice []*Item

	itemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	itemType                 = reflect.TypeOf(&Item{})
	itemMapping              = queries.MakeStructMapping(itemType)
	itemPrimaryKeyMapping, _ = queries.BindMapping(itemType, itemMapping, itemPrimaryKeyColumns)
	itemInsertCacheMut       sync.RWMutex
	itemInsertCache          = make(map[string]insertCache)
	itemUpdateCacheMut       sync.RWMutex
	itemUpdateCache          = make(map[string]updateCache)
	itemUpsertCacheMut       sync.RWMutex
	itemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single item record from the query using the global executor.
func (q itemQuery) OneG(ctx context.Context) (*Item, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single item record from the query.
func (q itemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Item, error) {
	o := &Item{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for items")
	}

	return o, nil
}

// AllG returns all Item records from the query using the global executor.
func (q itemQuery) AllG(ctx context.Context) (ItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Item records from the query.
func (q itemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ItemSlice, error) {
	var o []*Item

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Item slice")
	}

	return o, nil
}

// CountG returns the count of all Item records in the query, and panics on error.
func (q itemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Item records in the query.
func (q itemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count items rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q itemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q itemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if items exists")
	}

	return count > 0, nil
}

// Kind pointed to by the foreign key.
func (o *Item) Kind(mods ...qm.QueryMod) itemKindQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.KindID),
	}

	queryMods = append(queryMods, mods...)

	query := ItemKinds(queryMods...)
	queries.SetFrom(query.Query, "\"item_kinds\"")

	return query
}

// ItemOption pointed to by the foreign key.
func (o *Item) ItemOption(mods ...qm.QueryMod) itemOptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"item_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ItemOptions(queryMods...)
	queries.SetFrom(query.Query, "\"item_options\"")

	return query
}

// SideItemItemSide pointed to by the foreign key.
func (o *Item) SideItemItemSide(mods ...qm.QueryMod) itemSideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"side_item_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ItemSides(queryMods...)
	queries.SetFrom(query.Query, "\"item_sides\"")

	return query
}

// ItemSide pointed to by the foreign key.
func (o *Item) ItemSide(mods ...qm.QueryMod) itemSideQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"item_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ItemSides(queryMods...)
	queries.SetFrom(query.Query, "\"item_sides\"")

	return query
}

// OrderItems retrieves all the order_item's OrderItems with an executor.
func (o *Item) OrderItems(mods ...qm.QueryMod) orderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_items\".\"item_id\"=?", o.ID),
	)

	query := OrderItems(queryMods...)
	queries.SetFrom(query.Query, "\"order_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order_items\".*"})
	}

	return query
}

// LoadKind allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemL) LoadKind(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItem interface{}, mods queries.Applicator) error {
	var slice []*Item
	var object *Item

	if singular {
		object = maybeItem.(*Item)
	} else {
		slice = *maybeItem.(*[]*Item)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemR{}
		}
		if !queries.IsNil(object.KindID) {
			args = append(args, object.KindID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.KindID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.KindID) {
				args = append(args, obj.KindID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_kinds`),
		qm.WhereIn(`item_kinds.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemKind")
	}

	var resultSlice []*ItemKind
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemKind")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_kinds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_kinds")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Kind = foreign
		if foreign.R == nil {
			foreign.R = &itemKindR{}
		}
		foreign.R.KindItems = append(foreign.R.KindItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.KindID, foreign.ID) {
				local.R.Kind = foreign
				if foreign.R == nil {
					foreign.R = &itemKindR{}
				}
				foreign.R.KindItems = append(foreign.R.KindItems, local)
				break
			}
		}
	}

	return nil
}

// LoadItemOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (itemL) LoadItemOption(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItem interface{}, mods queries.Applicator) error {
	var slice []*Item
	var object *Item

	if singular {
		object = maybeItem.(*Item)
	} else {
		slice = *maybeItem.(*[]*Item)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_options`),
		qm.WhereIn(`item_options.item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemOption")
	}

	var resultSlice []*ItemOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemOption")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_options")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ItemOption = foreign
		if foreign.R == nil {
			foreign.R = &itemOptionR{}
		}
		foreign.R.Item = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ItemID) {
				local.R.ItemOption = foreign
				if foreign.R == nil {
					foreign.R = &itemOptionR{}
				}
				foreign.R.Item = local
				break
			}
		}
	}

	return nil
}

// LoadSideItemItemSide allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (itemL) LoadSideItemItemSide(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItem interface{}, mods queries.Applicator) error {
	var slice []*Item
	var object *Item

	if singular {
		object = maybeItem.(*Item)
	} else {
		slice = *maybeItem.(*[]*Item)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_sides`),
		qm.WhereIn(`item_sides.side_item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemSide")
	}

	var resultSlice []*ItemSide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemSide")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_sides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_sides")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SideItemItemSide = foreign
		if foreign.R == nil {
			foreign.R = &itemSideR{}
		}
		foreign.R.SideItem = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.SideItemID) {
				local.R.SideItemItemSide = foreign
				if foreign.R == nil {
					foreign.R = &itemSideR{}
				}
				foreign.R.SideItem = local
				break
			}
		}
	}

	return nil
}

// LoadItemSide allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (itemL) LoadItemSide(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItem interface{}, mods queries.Applicator) error {
	var slice []*Item
	var object *Item

	if singular {
		object = maybeItem.(*Item)
	} else {
		slice = *maybeItem.(*[]*Item)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_sides`),
		qm.WhereIn(`item_sides.item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemSide")
	}

	var resultSlice []*ItemSide
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemSide")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_sides")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_sides")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ItemSide = foreign
		if foreign.R == nil {
			foreign.R = &itemSideR{}
		}
		foreign.R.Item = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ItemID) {
				local.R.ItemSide = foreign
				if foreign.R == nil {
					foreign.R = &itemSideR{}
				}
				foreign.R.Item = local
				break
			}
		}
	}

	return nil
}

// LoadOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (itemL) LoadOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItem interface{}, mods queries.Applicator) error {
	var slice []*Item
	var object *Item

	if singular {
		object = maybeItem.(*Item)
	} else {
		slice = *maybeItem.(*[]*Item)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_items")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if singular {
		object.R.OrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderItemR{}
			}
			foreign.R.Item = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ItemID) {
				local.R.OrderItems = append(local.R.OrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.Item = local
				break
			}
		}
	}

	return nil
}

// SetKindG of the item to the related item.
// Sets o.R.Kind to related.
// Adds o to related.R.KindItems.
// Uses the global database handle.
func (o *Item) SetKindG(ctx context.Context, insert bool, related *ItemKind) error {
	return o.SetKind(ctx, boil.GetContextDB(), insert, related)
}

// SetKind of the item to the related item.
// Sets o.R.Kind to related.
// Adds o to related.R.KindItems.
func (o *Item) SetKind(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ItemKind) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"kind_id"}),
		strmangle.WhereClause("\"", "\"", 0, itemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.KindID, related.ID)
	if o.R == nil {
		o.R = &itemR{
			Kind: related,
		}
	} else {
		o.R.Kind = related
	}

	if related.R == nil {
		related.R = &itemKindR{
			KindItems: ItemSlice{o},
		}
	} else {
		related.R.KindItems = append(related.R.KindItems, o)
	}

	return nil
}

// SetItemOptionG of the item to the related item.
// Sets o.R.ItemOption to related.
// Adds o to related.R.Item.
// Uses the global database handle.
func (o *Item) SetItemOptionG(ctx context.Context, insert bool, related *ItemOption) error {
	return o.SetItemOption(ctx, boil.GetContextDB(), insert, related)
}

// SetItemOption of the item to the related item.
// Sets o.R.ItemOption to related.
// Adds o to related.R.Item.
func (o *Item) SetItemOption(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ItemOption) error {
	var err error

	if insert {
		queries.Assign(&related.ItemID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"item_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"item_id"}),
			strmangle.WhereClause("\"", "\"", 0, itemOptionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ItemID, related.OptionID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ItemID, o.ID)
	}

	if o.R == nil {
		o.R = &itemR{
			ItemOption: related,
		}
	} else {
		o.R.ItemOption = related
	}

	if related.R == nil {
		related.R = &itemOptionR{
			Item: o,
		}
	} else {
		related.R.Item = o
	}
	return nil
}

// SetSideItemItemSideG of the item to the related item.
// Sets o.R.SideItemItemSide to related.
// Adds o to related.R.SideItem.
// Uses the global database handle.
func (o *Item) SetSideItemItemSideG(ctx context.Context, insert bool, related *ItemSide) error {
	return o.SetSideItemItemSide(ctx, boil.GetContextDB(), insert, related)
}

// SetSideItemItemSide of the item to the related item.
// Sets o.R.SideItemItemSide to related.
// Adds o to related.R.SideItem.
func (o *Item) SetSideItemItemSide(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ItemSide) error {
	var err error

	if insert {
		queries.Assign(&related.SideItemID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"item_sides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"side_item_id"}),
			strmangle.WhereClause("\"", "\"", 0, itemSidePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ItemID, related.SideItemID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.SideItemID, o.ID)
	}

	if o.R == nil {
		o.R = &itemR{
			SideItemItemSide: related,
		}
	} else {
		o.R.SideItemItemSide = related
	}

	if related.R == nil {
		related.R = &itemSideR{
			SideItem: o,
		}
	} else {
		related.R.SideItem = o
	}
	return nil
}

// SetItemSideG of the item to the related item.
// Sets o.R.ItemSide to related.
// Adds o to related.R.Item.
// Uses the global database handle.
func (o *Item) SetItemSideG(ctx context.Context, insert bool, related *ItemSide) error {
	return o.SetItemSide(ctx, boil.GetContextDB(), insert, related)
}

// SetItemSide of the item to the related item.
// Sets o.R.ItemSide to related.
// Adds o to related.R.Item.
func (o *Item) SetItemSide(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ItemSide) error {
	var err error

	if insert {
		queries.Assign(&related.ItemID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"item_sides\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, []string{"item_id"}),
			strmangle.WhereClause("\"", "\"", 0, itemSidePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ItemID, related.SideItemID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ItemID, o.ID)
	}

	if o.R == nil {
		o.R = &itemR{
			ItemSide: related,
		}
	} else {
		o.R.ItemSide = related
	}

	if related.R == nil {
		related.R = &itemSideR{
			Item: o,
		}
	} else {
		related.R.Item = o
	}
	return nil
}

// AddOrderItemsG adds the given related objects to the existing relationships
// of the item, optionally inserting them as new records.
// Appends related to o.R.OrderItems.
// Sets related.R.Item appropriately.
// Uses the global database handle.
func (o *Item) AddOrderItemsG(ctx context.Context, insert bool, related ...*OrderItem) error {
	return o.AddOrderItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddOrderItems adds the given related objects to the existing relationships
// of the item, optionally inserting them as new records.
// Appends related to o.R.OrderItems.
// Sets related.R.Item appropriately.
func (o *Item) AddOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"item_id"}),
				strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &itemR{
			OrderItems: related,
		}
	} else {
		o.R.OrderItems = append(o.R.OrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderItemR{
				Item: o,
			}
		} else {
			rel.R.Item = o
		}
	}
	return nil
}

// Items retrieves all the records using an executor.
func Items(mods ...qm.QueryMod) itemQuery {
	mods = append(mods, qm.From("\"items\""))
	return itemQuery{NewQuery(mods...)}
}

// FindItemG retrieves a single record by ID.
func FindItemG(ctx context.Context, iD null.Int64, selectCols ...string) (*Item, error) {
	return FindItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindItem(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Item, error) {
	itemObj := &Item{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"items\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, itemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from items")
	}

	return itemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Item) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Item) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(itemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	itemInsertCacheMut.RLock()
	cache, cached := itemInsertCache[key]
	itemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			itemAllColumns,
			itemColumnsWithDefault,
			itemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(itemType, itemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(itemType, itemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"items\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, itemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into items")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for items")
	}

CacheNoHooks:
	if !cached {
		itemInsertCacheMut.Lock()
		itemInsertCache[key] = cache
		itemInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Item record using the global executor.
// See Update for more documentation.
func (o *Item) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Item.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Item) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	itemUpdateCacheMut.RLock()
	cache, cached := itemUpdateCache[key]
	itemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			itemAllColumns,
			itemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, itemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(itemType, itemMapping, append(wl, itemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for items")
	}

	if !cached {
		itemUpdateCacheMut.Lock()
		itemUpdateCache[key] = cache
		itemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q itemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q itemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for items")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, itemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in item slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all item")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Item record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Item) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Item record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Item) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Item provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), itemPrimaryKeyMapping)
	sql := "DELETE FROM \"items\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for items")
	}

	return rowsAff, nil
}

func (q itemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q itemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no itemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for items")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, itemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from item slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for items")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Item) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Item provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Item) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"items\".* FROM \"items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, itemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ItemSlice")
	}

	*o = slice

	return nil
}

// ItemExistsG checks if the Item row exists.
func ItemExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return ItemExists(ctx, boil.GetContextDB(), iD)
}

// ItemExists checks if the Item row exists.
func ItemExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"items\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if items exists")
	}

	return exists, nil
}
