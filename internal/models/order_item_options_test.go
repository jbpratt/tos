// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderItemOptions(t *testing.T) {
	t.Parallel()

	query := OrderItemOptions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderItemOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderItemOptions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderItemOptionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderItemOptionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderItemOption exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderItemOptionExists to return true, but got false.")
	}
}

func testOrderItemOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderItemOptionFound, err := FindOrderItemOption(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderItemOptionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderItemOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderItemOptions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderItemOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderItemOptions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderItemOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderItemOptionOne := &OrderItemOption{}
	orderItemOptionTwo := &OrderItemOption{}
	if err = randomize.Struct(seed, orderItemOptionOne, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}
	if err = randomize.Struct(seed, orderItemOptionTwo, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderItemOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderItemOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderItemOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderItemOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderItemOptionOne := &OrderItemOption{}
	orderItemOptionTwo := &OrderItemOption{}
	if err = randomize.Struct(seed, orderItemOptionOne, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}
	if err = randomize.Struct(seed, orderItemOptionTwo, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderItemOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderItemOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOrderItemOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderItemOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderItemOptionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderItemOptionToOneOrderItemUsingOrderItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItemOption
	var foreign OrderItem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderItemID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrderItem().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderItemOptionSlice{&local}
	if err = local.L.LoadOrderItem(ctx, tx, false, (*[]*OrderItemOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderItem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrderItem = nil
	if err = local.L.LoadOrderItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderItem == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemOptionToOneOptionUsingOption(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItemOption
	var foreign Option

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OptionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Option().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderItemOptionSlice{&local}
	if err = local.L.LoadOption(ctx, tx, false, (*[]*OrderItemOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Option = nil
	if err = local.L.LoadOption(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemOptionToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItemOption
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderItemOptionSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*OrderItemOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemOptionToOneSetOpOrderItemUsingOrderItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItemOption
	var b, c OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemOptionDBTypes, false, strmangle.SetComplement(orderItemOptionPrimaryKeyColumns, orderItemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrderItem{&b, &c} {
		err = a.SetOrderItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrderItem != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItemOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderItemID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderItemID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderItemID))
		reflect.Indirect(reflect.ValueOf(&a.OrderItemID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderItemID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderItemID, x.ID)
		}
	}
}
func testOrderItemOptionToOneSetOpOptionUsingOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItemOption
	var b, c Option

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemOptionDBTypes, false, strmangle.SetComplement(orderItemOptionPrimaryKeyColumns, orderItemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Option{&b, &c} {
		err = a.SetOption(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Option != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItemOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OptionID, x.ID) {
			t.Error("foreign key was wrong value", a.OptionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OptionID))
		reflect.Indirect(reflect.ValueOf(&a.OptionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OptionID, x.ID) {
			t.Error("foreign key was wrong value", a.OptionID, x.ID)
		}
	}
}
func testOrderItemOptionToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItemOption
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemOptionDBTypes, false, strmangle.SetComplement(orderItemOptionPrimaryKeyColumns, orderItemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItemOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testOrderItemOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderItemOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderItemOptionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderItemOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderItemOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderItemOptionDBTypes = map[string]string{`ID`: `INTEGER`, `OrderID`: `INTEGER`, `OptionID`: `INTEGER`, `OrderItemID`: `INTEGER`, `Price`: `INTEGER`}
	_                      = bytes.MinRead
)

func testOrderItemOptionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderItemOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderItemOptionAllColumns) == len(orderItemOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderItemOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderItemOptionAllColumns) == len(orderItemOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderItemOption{}
	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderItemOptionDBTypes, true, orderItemOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItemOption struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderItemOptionAllColumns, orderItemOptionPrimaryKeyColumns) {
		fields = orderItemOptionAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderItemOptionAllColumns,
			orderItemOptionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderItemOptionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
