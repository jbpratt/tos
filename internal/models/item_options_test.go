// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testItemOptions(t *testing.T) {
	t.Parallel()

	query := ItemOptions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testItemOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testItemOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ItemOptions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testItemOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ItemOptionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testItemOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ItemOptionExists(ctx, tx, o.ItemID, o.OptionID)
	if err != nil {
		t.Errorf("Unable to check if ItemOption exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ItemOptionExists to return true, but got false.")
	}
}

func testItemOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	itemOptionFound, err := FindItemOption(ctx, tx, o.ItemID, o.OptionID)
	if err != nil {
		t.Error(err)
	}

	if itemOptionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testItemOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ItemOptions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testItemOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ItemOptions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testItemOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	itemOptionOne := &ItemOption{}
	itemOptionTwo := &ItemOption{}
	if err = randomize.Struct(seed, itemOptionOne, itemOptionDBTypes, false, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}
	if err = randomize.Struct(seed, itemOptionTwo, itemOptionDBTypes, false, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = itemOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = itemOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ItemOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testItemOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	itemOptionOne := &ItemOption{}
	itemOptionTwo := &ItemOption{}
	if err = randomize.Struct(seed, itemOptionOne, itemOptionDBTypes, false, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}
	if err = randomize.Struct(seed, itemOptionTwo, itemOptionDBTypes, false, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = itemOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = itemOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testItemOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testItemOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(itemOptionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testItemOptionToOneOptionUsingOption(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ItemOption
	var foreign Option

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, itemOptionDBTypes, false, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OptionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Option().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ItemOptionSlice{&local}
	if err = local.L.LoadOption(ctx, tx, false, (*[]*ItemOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Option = nil
	if err = local.L.LoadOption(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Option == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testItemOptionToOneItemUsingItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ItemOption
	var foreign Item

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, itemOptionDBTypes, false, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, itemDBTypes, true, itemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Item struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ItemID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Item().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ItemOptionSlice{&local}
	if err = local.L.LoadItem(ctx, tx, false, (*[]*ItemOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Item == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Item = nil
	if err = local.L.LoadItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Item == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testItemOptionToOneSetOpOptionUsingOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ItemOption
	var b, c Option

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, itemOptionDBTypes, false, strmangle.SetComplement(itemOptionPrimaryKeyColumns, itemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Option{&b, &c} {
		err = a.SetOption(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Option != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ItemOption != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OptionID, x.ID) {
			t.Error("foreign key was wrong value", a.OptionID)
		}

		if exists, err := ItemOptionExists(ctx, tx, a.ItemID, a.OptionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testItemOptionToOneSetOpItemUsingItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ItemOption
	var b, c Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, itemOptionDBTypes, false, strmangle.SetComplement(itemOptionPrimaryKeyColumns, itemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Item{&b, &c} {
		err = a.SetItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Item != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ItemOption != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ItemID, x.ID) {
			t.Error("foreign key was wrong value", a.ItemID)
		}

		if exists, err := ItemOptionExists(ctx, tx, a.ItemID, a.OptionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testItemOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testItemOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ItemOptionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testItemOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ItemOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	itemOptionDBTypes = map[string]string{`ItemID`: `INTEGER`, `OptionID`: `INTEGER`, `IsDefault`: `INTEGER`, `Price`: `INTEGER`, `LightPrice`: `INTEGER`, `HeavyPrice`: `INTEGER`}
	_                 = bytes.MinRead
)

func testItemOptionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(itemOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(itemOptionAllColumns) == len(itemOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testItemOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(itemOptionAllColumns) == len(itemOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ItemOption{}
	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, itemOptionDBTypes, true, itemOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(itemOptionAllColumns, itemOptionPrimaryKeyColumns) {
		fields = itemOptionAllColumns
	} else {
		fields = strmangle.SetComplement(
			itemOptionAllColumns,
			itemOptionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ItemOptionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
