// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderItem is an object representing the database table.
type OrderItem struct {
	ID              null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	OrderID         int64      `boil:"order_id" json:"orderID" toml:"orderID" yaml:"orderID"`
	ItemID          int64      `boil:"item_id" json:"itemID" toml:"itemID" yaml:"itemID"`
	MainOrderItemID null.Int64 `boil:"main_order_item_id" json:"mainOrderItemID,omitempty" toml:"mainOrderItemID" yaml:"mainOrderItemID,omitempty"`
	Price           null.Int64 `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`

	R *orderItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderItemColumns = struct {
	ID              string
	OrderID         string
	ItemID          string
	MainOrderItemID string
	Price           string
}{
	ID:              "id",
	OrderID:         "order_id",
	ItemID:          "item_id",
	MainOrderItemID: "main_order_item_id",
	Price:           "price",
}

// Generated where

var OrderItemWhere = struct {
	ID              whereHelpernull_Int64
	OrderID         whereHelperint64
	ItemID          whereHelperint64
	MainOrderItemID whereHelpernull_Int64
	Price           whereHelpernull_Int64
}{
	ID:              whereHelpernull_Int64{field: "\"order_items\".\"id\""},
	OrderID:         whereHelperint64{field: "\"order_items\".\"order_id\""},
	ItemID:          whereHelperint64{field: "\"order_items\".\"item_id\""},
	MainOrderItemID: whereHelpernull_Int64{field: "\"order_items\".\"main_order_item_id\""},
	Price:           whereHelpernull_Int64{field: "\"order_items\".\"price\""},
}

// OrderItemRels is where relationship names are stored.
var OrderItemRels = struct {
	MainOrderItem           string
	Item                    string
	Order                   string
	OrderItemOptions        string
	MainOrderItemOrderItems string
}{
	MainOrderItem:           "MainOrderItem",
	Item:                    "Item",
	Order:                   "Order",
	OrderItemOptions:        "OrderItemOptions",
	MainOrderItemOrderItems: "MainOrderItemOrderItems",
}

// orderItemR is where relationships are stored.
type orderItemR struct {
	MainOrderItem           *OrderItem           `boil:"MainOrderItem" json:"MainOrderItem" toml:"MainOrderItem" yaml:"MainOrderItem"`
	Item                    *Item                `boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
	Order                   *Order               `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	OrderItemOptions        OrderItemOptionSlice `boil:"OrderItemOptions" json:"OrderItemOptions" toml:"OrderItemOptions" yaml:"OrderItemOptions"`
	MainOrderItemOrderItems OrderItemSlice       `boil:"MainOrderItemOrderItems" json:"MainOrderItemOrderItems" toml:"MainOrderItemOrderItems" yaml:"MainOrderItemOrderItems"`
}

// NewStruct creates a new relationship struct
func (*orderItemR) NewStruct() *orderItemR {
	return &orderItemR{}
}

// orderItemL is where Load methods for each relationship are stored.
type orderItemL struct{}

var (
	orderItemAllColumns            = []string{"id", "order_id", "item_id", "main_order_item_id", "price"}
	orderItemColumnsWithoutDefault = []string{}
	orderItemColumnsWithDefault    = []string{"id", "order_id", "item_id", "main_order_item_id", "price"}
	orderItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderItemSlice is an alias for a slice of pointers to OrderItem.
	// This should generally be used opposed to []OrderItem.
	OrderItemSlice []*OrderItem

	orderItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderItemType                 = reflect.TypeOf(&OrderItem{})
	orderItemMapping              = queries.MakeStructMapping(orderItemType)
	orderItemPrimaryKeyMapping, _ = queries.BindMapping(orderItemType, orderItemMapping, orderItemPrimaryKeyColumns)
	orderItemInsertCacheMut       sync.RWMutex
	orderItemInsertCache          = make(map[string]insertCache)
	orderItemUpdateCacheMut       sync.RWMutex
	orderItemUpdateCache          = make(map[string]updateCache)
	orderItemUpsertCacheMut       sync.RWMutex
	orderItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single orderItem record from the query using the global executor.
func (q orderItemQuery) OneG(ctx context.Context) (*OrderItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderItem record from the query.
func (q orderItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderItem, error) {
	o := &OrderItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_items")
	}

	return o, nil
}

// AllG returns all OrderItem records from the query using the global executor.
func (q orderItemQuery) AllG(ctx context.Context) (OrderItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderItem records from the query.
func (q orderItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderItemSlice, error) {
	var o []*OrderItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderItem slice")
	}

	return o, nil
}

// CountG returns the count of all OrderItem records in the query, and panics on error.
func (q orderItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderItem records in the query.
func (q orderItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_items rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q orderItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_items exists")
	}

	return count > 0, nil
}

// MainOrderItem pointed to by the foreign key.
func (o *OrderItem) MainOrderItem(mods ...qm.QueryMod) orderItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MainOrderItemID),
	}

	queryMods = append(queryMods, mods...)

	query := OrderItems(queryMods...)
	queries.SetFrom(query.Query, "\"order_items\"")

	return query
}

// Item pointed to by the foreign key.
func (o *OrderItem) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	query := Items(queryMods...)
	queries.SetFrom(query.Query, "\"items\"")

	return query
}

// Order pointed to by the foreign key.
func (o *OrderItem) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := Orders(queryMods...)
	queries.SetFrom(query.Query, "\"orders\"")

	return query
}

// OrderItemOptions retrieves all the order_item_option's OrderItemOptions with an executor.
func (o *OrderItem) OrderItemOptions(mods ...qm.QueryMod) orderItemOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_item_options\".\"order_item_id\"=?", o.ID),
	)

	query := OrderItemOptions(queryMods...)
	queries.SetFrom(query.Query, "\"order_item_options\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order_item_options\".*"})
	}

	return query
}

// MainOrderItemOrderItems retrieves all the order_item's OrderItems with an executor via main_order_item_id column.
func (o *OrderItem) MainOrderItemOrderItems(mods ...qm.QueryMod) orderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_items\".\"main_order_item_id\"=?", o.ID),
	)

	query := OrderItems(queryMods...)
	queries.SetFrom(query.Query, "\"order_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order_items\".*"})
	}

	return query
}

// LoadMainOrderItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderItemL) LoadMainOrderItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItem interface{}, mods queries.Applicator) error {
	var slice []*OrderItem
	var object *OrderItem

	if singular {
		object = maybeOrderItem.(*OrderItem)
	} else {
		slice = *maybeOrderItem.(*[]*OrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemR{}
		}
		if !queries.IsNil(object.MainOrderItemID) {
			args = append(args, object.MainOrderItemID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MainOrderItemID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MainOrderItemID) {
				args = append(args, obj.MainOrderItemID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderItem")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MainOrderItem = foreign
		if foreign.R == nil {
			foreign.R = &orderItemR{}
		}
		foreign.R.MainOrderItemOrderItems = append(foreign.R.MainOrderItemOrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MainOrderItemID, foreign.ID) {
				local.R.MainOrderItem = foreign
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.MainOrderItemOrderItems = append(foreign.R.MainOrderItemOrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderItemL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItem interface{}, mods queries.Applicator) error {
	var slice []*OrderItem
	var object *OrderItem

	if singular {
		object = maybeOrderItem.(*OrderItem)
	} else {
		slice = *maybeOrderItem.(*[]*OrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemR{}
		}
		if !queries.IsNil(object.ItemID) {
			args = append(args, object.ItemID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ItemID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ItemID) {
				args = append(args, obj.ItemID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`items`),
		qm.WhereIn(`items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.OrderItems = append(foreign.R.OrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ItemID, foreign.ID) {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.OrderItems = append(foreign.R.OrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderItemL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItem interface{}, mods queries.Applicator) error {
	var slice []*OrderItem
	var object *OrderItem

	if singular {
		object = maybeOrderItem.(*OrderItem)
	} else {
		slice = *maybeOrderItem.(*[]*OrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderItems = append(foreign.R.OrderItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderItems = append(foreign.R.OrderItems, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderItemOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderItemL) LoadOrderItemOptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItem interface{}, mods queries.Applicator) error {
	var slice []*OrderItem
	var object *OrderItem

	if singular {
		object = maybeOrderItem.(*OrderItem)
	} else {
		slice = *maybeOrderItem.(*[]*OrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_item_options`),
		qm.WhereIn(`order_item_options.order_item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_item_options")
	}

	var resultSlice []*OrderItemOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_item_options")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_item_options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_item_options")
	}

	if singular {
		object.R.OrderItemOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderItemOptionR{}
			}
			foreign.R.OrderItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderItemID) {
				local.R.OrderItemOptions = append(local.R.OrderItemOptions, foreign)
				if foreign.R == nil {
					foreign.R = &orderItemOptionR{}
				}
				foreign.R.OrderItem = local
				break
			}
		}
	}

	return nil
}

// LoadMainOrderItemOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderItemL) LoadMainOrderItemOrderItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItem interface{}, mods queries.Applicator) error {
	var slice []*OrderItem
	var object *OrderItem

	if singular {
		object = maybeOrderItem.(*OrderItem)
	} else {
		slice = *maybeOrderItem.(*[]*OrderItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.main_order_item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_items")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if singular {
		object.R.MainOrderItemOrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderItemR{}
			}
			foreign.R.MainOrderItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.MainOrderItemID) {
				local.R.MainOrderItemOrderItems = append(local.R.MainOrderItemOrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.MainOrderItem = local
				break
			}
		}
	}

	return nil
}

// SetMainOrderItemG of the orderItem to the related item.
// Sets o.R.MainOrderItem to related.
// Adds o to related.R.MainOrderItemOrderItems.
// Uses the global database handle.
func (o *OrderItem) SetMainOrderItemG(ctx context.Context, insert bool, related *OrderItem) error {
	return o.SetMainOrderItem(ctx, boil.GetContextDB(), insert, related)
}

// SetMainOrderItem of the orderItem to the related item.
// Sets o.R.MainOrderItem to related.
// Adds o to related.R.MainOrderItemOrderItems.
func (o *OrderItem) SetMainOrderItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrderItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"main_order_item_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MainOrderItemID, related.ID)
	if o.R == nil {
		o.R = &orderItemR{
			MainOrderItem: related,
		}
	} else {
		o.R.MainOrderItem = related
	}

	if related.R == nil {
		related.R = &orderItemR{
			MainOrderItemOrderItems: OrderItemSlice{o},
		}
	} else {
		related.R.MainOrderItemOrderItems = append(related.R.MainOrderItemOrderItems, o)
	}

	return nil
}

// RemoveMainOrderItemG relationship.
// Sets o.R.MainOrderItem to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *OrderItem) RemoveMainOrderItemG(ctx context.Context, related *OrderItem) error {
	return o.RemoveMainOrderItem(ctx, boil.GetContextDB(), related)
}

// RemoveMainOrderItem relationship.
// Sets o.R.MainOrderItem to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OrderItem) RemoveMainOrderItem(ctx context.Context, exec boil.ContextExecutor, related *OrderItem) error {
	var err error

	queries.SetScanner(&o.MainOrderItemID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("main_order_item_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MainOrderItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MainOrderItemOrderItems {
		if queries.Equal(o.MainOrderItemID, ri.MainOrderItemID) {
			continue
		}

		ln := len(related.R.MainOrderItemOrderItems)
		if ln > 1 && i < ln-1 {
			related.R.MainOrderItemOrderItems[i] = related.R.MainOrderItemOrderItems[ln-1]
		}
		related.R.MainOrderItemOrderItems = related.R.MainOrderItemOrderItems[:ln-1]
		break
	}
	return nil
}

// SetItemG of the orderItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.OrderItems.
// Uses the global database handle.
func (o *OrderItem) SetItemG(ctx context.Context, insert bool, related *Item) error {
	return o.SetItem(ctx, boil.GetContextDB(), insert, related)
}

// SetItem of the orderItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.OrderItems.
func (o *OrderItem) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ItemID, related.ID)
	if o.R == nil {
		o.R = &orderItemR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			OrderItems: OrderItemSlice{o},
		}
	} else {
		related.R.OrderItems = append(related.R.OrderItems, o)
	}

	return nil
}

// SetOrderG of the orderItem to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderItems.
// Uses the global database handle.
func (o *OrderItem) SetOrderG(ctx context.Context, insert bool, related *Order) error {
	return o.SetOrder(ctx, boil.GetContextDB(), insert, related)
}

// SetOrder of the orderItem to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderItems.
func (o *OrderItem) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &orderItemR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderItems: OrderItemSlice{o},
		}
	} else {
		related.R.OrderItems = append(related.R.OrderItems, o)
	}

	return nil
}

// AddOrderItemOptionsG adds the given related objects to the existing relationships
// of the order_item, optionally inserting them as new records.
// Appends related to o.R.OrderItemOptions.
// Sets related.R.OrderItem appropriately.
// Uses the global database handle.
func (o *OrderItem) AddOrderItemOptionsG(ctx context.Context, insert bool, related ...*OrderItemOption) error {
	return o.AddOrderItemOptions(ctx, boil.GetContextDB(), insert, related...)
}

// AddOrderItemOptions adds the given related objects to the existing relationships
// of the order_item, optionally inserting them as new records.
// Appends related to o.R.OrderItemOptions.
// Sets related.R.OrderItem appropriately.
func (o *OrderItem) AddOrderItemOptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderItemOption) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_item_options\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"order_item_id"}),
				strmangle.WhereClause("\"", "\"", 0, orderItemOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderItemR{
			OrderItemOptions: related,
		}
	} else {
		o.R.OrderItemOptions = append(o.R.OrderItemOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderItemOptionR{
				OrderItem: o,
			}
		} else {
			rel.R.OrderItem = o
		}
	}
	return nil
}

// AddMainOrderItemOrderItemsG adds the given related objects to the existing relationships
// of the order_item, optionally inserting them as new records.
// Appends related to o.R.MainOrderItemOrderItems.
// Sets related.R.MainOrderItem appropriately.
// Uses the global database handle.
func (o *OrderItem) AddMainOrderItemOrderItemsG(ctx context.Context, insert bool, related ...*OrderItem) error {
	return o.AddMainOrderItemOrderItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddMainOrderItemOrderItems adds the given related objects to the existing relationships
// of the order_item, optionally inserting them as new records.
// Appends related to o.R.MainOrderItemOrderItems.
// Sets related.R.MainOrderItem appropriately.
func (o *OrderItem) AddMainOrderItemOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MainOrderItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"main_order_item_id"}),
				strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MainOrderItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderItemR{
			MainOrderItemOrderItems: related,
		}
	} else {
		o.R.MainOrderItemOrderItems = append(o.R.MainOrderItemOrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderItemR{
				MainOrderItem: o,
			}
		} else {
			rel.R.MainOrderItem = o
		}
	}
	return nil
}

// SetMainOrderItemOrderItemsG removes all previously related items of the
// order_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MainOrderItem's MainOrderItemOrderItems accordingly.
// Replaces o.R.MainOrderItemOrderItems with related.
// Sets related.R.MainOrderItem's MainOrderItemOrderItems accordingly.
// Uses the global database handle.
func (o *OrderItem) SetMainOrderItemOrderItemsG(ctx context.Context, insert bool, related ...*OrderItem) error {
	return o.SetMainOrderItemOrderItems(ctx, boil.GetContextDB(), insert, related...)
}

// SetMainOrderItemOrderItems removes all previously related items of the
// order_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MainOrderItem's MainOrderItemOrderItems accordingly.
// Replaces o.R.MainOrderItemOrderItems with related.
// Sets related.R.MainOrderItem's MainOrderItemOrderItems accordingly.
func (o *OrderItem) SetMainOrderItemOrderItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderItem) error {
	query := "update \"order_items\" set \"main_order_item_id\" = null where \"main_order_item_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MainOrderItemOrderItems {
			queries.SetScanner(&rel.MainOrderItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MainOrderItem = nil
		}

		o.R.MainOrderItemOrderItems = nil
	}
	return o.AddMainOrderItemOrderItems(ctx, exec, insert, related...)
}

// RemoveMainOrderItemOrderItemsG relationships from objects passed in.
// Removes related items from R.MainOrderItemOrderItems (uses pointer comparison, removal does not keep order)
// Sets related.R.MainOrderItem.
// Uses the global database handle.
func (o *OrderItem) RemoveMainOrderItemOrderItemsG(ctx context.Context, related ...*OrderItem) error {
	return o.RemoveMainOrderItemOrderItems(ctx, boil.GetContextDB(), related...)
}

// RemoveMainOrderItemOrderItems relationships from objects passed in.
// Removes related items from R.MainOrderItemOrderItems (uses pointer comparison, removal does not keep order)
// Sets related.R.MainOrderItem.
func (o *OrderItem) RemoveMainOrderItemOrderItems(ctx context.Context, exec boil.ContextExecutor, related ...*OrderItem) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MainOrderItemID, nil)
		if rel.R != nil {
			rel.R.MainOrderItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("main_order_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MainOrderItemOrderItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.MainOrderItemOrderItems)
			if ln > 1 && i < ln-1 {
				o.R.MainOrderItemOrderItems[i] = o.R.MainOrderItemOrderItems[ln-1]
			}
			o.R.MainOrderItemOrderItems = o.R.MainOrderItemOrderItems[:ln-1]
			break
		}
	}

	return nil
}

// OrderItems retrieves all the records using an executor.
func OrderItems(mods ...qm.QueryMod) orderItemQuery {
	mods = append(mods, qm.From("\"order_items\""))
	return orderItemQuery{NewQuery(mods...)}
}

// FindOrderItemG retrieves a single record by ID.
func FindOrderItemG(ctx context.Context, iD null.Int64, selectCols ...string) (*OrderItem, error) {
	return FindOrderItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderItem(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*OrderItem, error) {
	orderItemObj := &OrderItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_items\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_items")
	}

	return orderItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderItemInsertCacheMut.RLock()
	cache, cached := orderItemInsertCache[key]
	orderItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderItemAllColumns,
			orderItemColumnsWithDefault,
			orderItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderItemType, orderItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderItemType, orderItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"order_items\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_items")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_items")
	}

CacheNoHooks:
	if !cached {
		orderItemInsertCacheMut.Lock()
		orderItemInsertCache[key] = cache
		orderItemInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single OrderItem record using the global executor.
// See Update for more documentation.
func (o *OrderItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderItemUpdateCacheMut.RLock()
	cache, cached := orderItemUpdateCache[key]
	orderItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderItemAllColumns,
			orderItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderItemType, orderItemMapping, append(wl, orderItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_items")
	}

	if !cached {
		orderItemUpdateCacheMut.Lock()
		orderItemUpdateCache[key] = cache
		orderItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q orderItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_items")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderItem")
	}
	return rowsAff, nil
}

// DeleteG deletes a single OrderItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderItemPrimaryKeyMapping)
	sql := "DELETE FROM \"order_items\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_items")
	}

	return rowsAff, nil
}

func (q orderItemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_items")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_items")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no OrderItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty OrderItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_items\".* FROM \"order_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderItemSlice")
	}

	*o = slice

	return nil
}

// OrderItemExistsG checks if the OrderItem row exists.
func OrderItemExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return OrderItemExists(ctx, boil.GetContextDB(), iD)
}

// OrderItemExists checks if the OrderItem row exists.
func OrderItemExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_items\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_items exists")
	}

	return exists, nil
}
