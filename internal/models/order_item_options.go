// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderItemOption is an object representing the database table.
type OrderItemOption struct {
	ID          null.Int64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	OrderID     int64      `boil:"order_id" json:"orderID" toml:"orderID" yaml:"orderID"`
	OptionID    int64      `boil:"option_id" json:"optionID" toml:"optionID" yaml:"optionID"`
	OrderItemID int64      `boil:"order_item_id" json:"orderItemID" toml:"orderItemID" yaml:"orderItemID"`
	Price       null.Int64 `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`

	R *orderItemOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderItemOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderItemOptionColumns = struct {
	ID          string
	OrderID     string
	OptionID    string
	OrderItemID string
	Price       string
}{
	ID:          "id",
	OrderID:     "order_id",
	OptionID:    "option_id",
	OrderItemID: "order_item_id",
	Price:       "price",
}

// Generated where

var OrderItemOptionWhere = struct {
	ID          whereHelpernull_Int64
	OrderID     whereHelperint64
	OptionID    whereHelperint64
	OrderItemID whereHelperint64
	Price       whereHelpernull_Int64
}{
	ID:          whereHelpernull_Int64{field: "\"order_item_options\".\"id\""},
	OrderID:     whereHelperint64{field: "\"order_item_options\".\"order_id\""},
	OptionID:    whereHelperint64{field: "\"order_item_options\".\"option_id\""},
	OrderItemID: whereHelperint64{field: "\"order_item_options\".\"order_item_id\""},
	Price:       whereHelpernull_Int64{field: "\"order_item_options\".\"price\""},
}

// OrderItemOptionRels is where relationship names are stored.
var OrderItemOptionRels = struct {
	OrderItem string
	Option    string
	Order     string
}{
	OrderItem: "OrderItem",
	Option:    "Option",
	Order:     "Order",
}

// orderItemOptionR is where relationships are stored.
type orderItemOptionR struct {
	OrderItem *OrderItem `boil:"OrderItem" json:"OrderItem" toml:"OrderItem" yaml:"OrderItem"`
	Option    *Option    `boil:"Option" json:"Option" toml:"Option" yaml:"Option"`
	Order     *Order     `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*orderItemOptionR) NewStruct() *orderItemOptionR {
	return &orderItemOptionR{}
}

// orderItemOptionL is where Load methods for each relationship are stored.
type orderItemOptionL struct{}

var (
	orderItemOptionAllColumns            = []string{"id", "order_id", "option_id", "order_item_id", "price"}
	orderItemOptionColumnsWithoutDefault = []string{}
	orderItemOptionColumnsWithDefault    = []string{"id", "order_id", "option_id", "order_item_id", "price"}
	orderItemOptionPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderItemOptionSlice is an alias for a slice of pointers to OrderItemOption.
	// This should generally be used opposed to []OrderItemOption.
	OrderItemOptionSlice []*OrderItemOption

	orderItemOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderItemOptionType                 = reflect.TypeOf(&OrderItemOption{})
	orderItemOptionMapping              = queries.MakeStructMapping(orderItemOptionType)
	orderItemOptionPrimaryKeyMapping, _ = queries.BindMapping(orderItemOptionType, orderItemOptionMapping, orderItemOptionPrimaryKeyColumns)
	orderItemOptionInsertCacheMut       sync.RWMutex
	orderItemOptionInsertCache          = make(map[string]insertCache)
	orderItemOptionUpdateCacheMut       sync.RWMutex
	orderItemOptionUpdateCache          = make(map[string]updateCache)
	orderItemOptionUpsertCacheMut       sync.RWMutex
	orderItemOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single orderItemOption record from the query using the global executor.
func (q orderItemOptionQuery) OneG(ctx context.Context) (*OrderItemOption, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single orderItemOption record from the query.
func (q orderItemOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderItemOption, error) {
	o := &OrderItemOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_item_options")
	}

	return o, nil
}

// AllG returns all OrderItemOption records from the query using the global executor.
func (q orderItemOptionQuery) AllG(ctx context.Context) (OrderItemOptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all OrderItemOption records from the query.
func (q orderItemOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderItemOptionSlice, error) {
	var o []*OrderItemOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderItemOption slice")
	}

	return o, nil
}

// CountG returns the count of all OrderItemOption records in the query, and panics on error.
func (q orderItemOptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all OrderItemOption records in the query.
func (q orderItemOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_item_options rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q orderItemOptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q orderItemOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_item_options exists")
	}

	return count > 0, nil
}

// OrderItem pointed to by the foreign key.
func (o *OrderItemOption) OrderItem(mods ...qm.QueryMod) orderItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderItemID),
	}

	queryMods = append(queryMods, mods...)

	query := OrderItems(queryMods...)
	queries.SetFrom(query.Query, "\"order_items\"")

	return query
}

// Option pointed to by the foreign key.
func (o *OrderItemOption) Option(mods ...qm.QueryMod) optionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OptionID),
	}

	queryMods = append(queryMods, mods...)

	query := Options(queryMods...)
	queries.SetFrom(query.Query, "\"options\"")

	return query
}

// Order pointed to by the foreign key.
func (o *OrderItemOption) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := Orders(queryMods...)
	queries.SetFrom(query.Query, "\"orders\"")

	return query
}

// LoadOrderItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderItemOptionL) LoadOrderItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItemOption interface{}, mods queries.Applicator) error {
	var slice []*OrderItemOption
	var object *OrderItemOption

	if singular {
		object = maybeOrderItemOption.(*OrderItemOption)
	} else {
		slice = *maybeOrderItemOption.(*[]*OrderItemOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemOptionR{}
		}
		if !queries.IsNil(object.OrderItemID) {
			args = append(args, object.OrderItemID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderItemID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderItemID) {
				args = append(args, obj.OrderItemID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderItem")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderItem = foreign
		if foreign.R == nil {
			foreign.R = &orderItemR{}
		}
		foreign.R.OrderItemOptions = append(foreign.R.OrderItemOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderItemID, foreign.ID) {
				local.R.OrderItem = foreign
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.OrderItemOptions = append(foreign.R.OrderItemOptions, local)
				break
			}
		}
	}

	return nil
}

// LoadOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderItemOptionL) LoadOption(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItemOption interface{}, mods queries.Applicator) error {
	var slice []*OrderItemOption
	var object *OrderItemOption

	if singular {
		object = maybeOrderItemOption.(*OrderItemOption)
	} else {
		slice = *maybeOrderItemOption.(*[]*OrderItemOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemOptionR{}
		}
		if !queries.IsNil(object.OptionID) {
			args = append(args, object.OptionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OptionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OptionID) {
				args = append(args, obj.OptionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`options`),
		qm.WhereIn(`options.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Option")
	}

	var resultSlice []*Option
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for options")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Option = foreign
		if foreign.R == nil {
			foreign.R = &optionR{}
		}
		foreign.R.OrderItemOptions = append(foreign.R.OrderItemOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OptionID, foreign.ID) {
				local.R.Option = foreign
				if foreign.R == nil {
					foreign.R = &optionR{}
				}
				foreign.R.OrderItemOptions = append(foreign.R.OrderItemOptions, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderItemOptionL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderItemOption interface{}, mods queries.Applicator) error {
	var slice []*OrderItemOption
	var object *OrderItemOption

	if singular {
		object = maybeOrderItemOption.(*OrderItemOption)
	} else {
		slice = *maybeOrderItemOption.(*[]*OrderItemOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderItemOptionR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderItemOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderItemOptions = append(foreign.R.OrderItemOptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderItemOptions = append(foreign.R.OrderItemOptions, local)
				break
			}
		}
	}

	return nil
}

// SetOrderItemG of the orderItemOption to the related item.
// Sets o.R.OrderItem to related.
// Adds o to related.R.OrderItemOptions.
// Uses the global database handle.
func (o *OrderItemOption) SetOrderItemG(ctx context.Context, insert bool, related *OrderItem) error {
	return o.SetOrderItem(ctx, boil.GetContextDB(), insert, related)
}

// SetOrderItem of the orderItemOption to the related item.
// Sets o.R.OrderItem to related.
// Adds o to related.R.OrderItemOptions.
func (o *OrderItemOption) SetOrderItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrderItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"order_item_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderItemOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderItemID, related.ID)
	if o.R == nil {
		o.R = &orderItemOptionR{
			OrderItem: related,
		}
	} else {
		o.R.OrderItem = related
	}

	if related.R == nil {
		related.R = &orderItemR{
			OrderItemOptions: OrderItemOptionSlice{o},
		}
	} else {
		related.R.OrderItemOptions = append(related.R.OrderItemOptions, o)
	}

	return nil
}

// SetOptionG of the orderItemOption to the related item.
// Sets o.R.Option to related.
// Adds o to related.R.OrderItemOptions.
// Uses the global database handle.
func (o *OrderItemOption) SetOptionG(ctx context.Context, insert bool, related *Option) error {
	return o.SetOption(ctx, boil.GetContextDB(), insert, related)
}

// SetOption of the orderItemOption to the related item.
// Sets o.R.Option to related.
// Adds o to related.R.OrderItemOptions.
func (o *OrderItemOption) SetOption(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Option) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"option_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderItemOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OptionID, related.ID)
	if o.R == nil {
		o.R = &orderItemOptionR{
			Option: related,
		}
	} else {
		o.R.Option = related
	}

	if related.R == nil {
		related.R = &optionR{
			OrderItemOptions: OrderItemOptionSlice{o},
		}
	} else {
		related.R.OrderItemOptions = append(related.R.OrderItemOptions, o)
	}

	return nil
}

// SetOrderG of the orderItemOption to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderItemOptions.
// Uses the global database handle.
func (o *OrderItemOption) SetOrderG(ctx context.Context, insert bool, related *Order) error {
	return o.SetOrder(ctx, boil.GetContextDB(), insert, related)
}

// SetOrder of the orderItemOption to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderItemOptions.
func (o *OrderItemOption) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 0, orderItemOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &orderItemOptionR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderItemOptions: OrderItemOptionSlice{o},
		}
	} else {
		related.R.OrderItemOptions = append(related.R.OrderItemOptions, o)
	}

	return nil
}

// OrderItemOptions retrieves all the records using an executor.
func OrderItemOptions(mods ...qm.QueryMod) orderItemOptionQuery {
	mods = append(mods, qm.From("\"order_item_options\""))
	return orderItemOptionQuery{NewQuery(mods...)}
}

// FindOrderItemOptionG retrieves a single record by ID.
func FindOrderItemOptionG(ctx context.Context, iD null.Int64, selectCols ...string) (*OrderItemOption, error) {
	return FindOrderItemOption(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindOrderItemOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderItemOption(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*OrderItemOption, error) {
	orderItemOptionObj := &OrderItemOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_item_options\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderItemOptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_item_options")
	}

	return orderItemOptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderItemOption) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderItemOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_item_options provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderItemOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderItemOptionInsertCacheMut.RLock()
	cache, cached := orderItemOptionInsertCache[key]
	orderItemOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderItemOptionAllColumns,
			orderItemOptionColumnsWithDefault,
			orderItemOptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderItemOptionType, orderItemOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderItemOptionType, orderItemOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_item_options\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_item_options\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"order_item_options\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, orderItemOptionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_item_options")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_item_options")
	}

CacheNoHooks:
	if !cached {
		orderItemOptionInsertCacheMut.Lock()
		orderItemOptionInsertCache[key] = cache
		orderItemOptionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single OrderItemOption record using the global executor.
// See Update for more documentation.
func (o *OrderItemOption) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the OrderItemOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderItemOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderItemOptionUpdateCacheMut.RLock()
	cache, cached := orderItemOptionUpdateCache[key]
	orderItemOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderItemOptionAllColumns,
			orderItemOptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_item_options, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_item_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderItemOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderItemOptionType, orderItemOptionMapping, append(wl, orderItemOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_item_options row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_item_options")
	}

	if !cached {
		orderItemOptionUpdateCacheMut.Lock()
		orderItemOptionUpdateCache[key] = cache
		orderItemOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q orderItemOptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderItemOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_item_options")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderItemOptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderItemOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderItemOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderItemOption")
	}
	return rowsAff, nil
}

// DeleteG deletes a single OrderItemOption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderItemOption) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single OrderItemOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderItemOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderItemOption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderItemOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"order_item_options\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_item_options")
	}

	return rowsAff, nil
}

func (q orderItemOptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q orderItemOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderItemOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_item_options")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderItemOptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderItemOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_item_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderItemOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_item_options")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderItemOption) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no OrderItemOption provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderItemOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderItemOption(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderItemOptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty OrderItemOptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderItemOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderItemOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderItemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_item_options\".* FROM \"order_item_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderItemOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderItemOptionSlice")
	}

	*o = slice

	return nil
}

// OrderItemOptionExistsG checks if the OrderItemOption row exists.
func OrderItemOptionExistsG(ctx context.Context, iD null.Int64) (bool, error) {
	return OrderItemOptionExists(ctx, boil.GetContextDB(), iD)
}

// OrderItemOptionExists checks if the OrderItemOption row exists.
func OrderItemOptionExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_item_options\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_item_options exists")
	}

	return exists, nil
}
