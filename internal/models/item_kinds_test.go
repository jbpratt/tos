// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testItemKinds(t *testing.T) {
	t.Parallel()

	query := ItemKinds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testItemKindsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testItemKindsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ItemKinds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testItemKindsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ItemKindSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testItemKindsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ItemKindExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ItemKind exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ItemKindExists to return true, but got false.")
	}
}

func testItemKindsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	itemKindFound, err := FindItemKind(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if itemKindFound == nil {
		t.Error("want a record, got nil")
	}
}

func testItemKindsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ItemKinds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testItemKindsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ItemKinds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testItemKindsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	itemKindOne := &ItemKind{}
	itemKindTwo := &ItemKind{}
	if err = randomize.Struct(seed, itemKindOne, itemKindDBTypes, false, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}
	if err = randomize.Struct(seed, itemKindTwo, itemKindDBTypes, false, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = itemKindOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = itemKindTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ItemKinds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testItemKindsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	itemKindOne := &ItemKind{}
	itemKindTwo := &ItemKind{}
	if err = randomize.Struct(seed, itemKindOne, itemKindDBTypes, false, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}
	if err = randomize.Struct(seed, itemKindTwo, itemKindDBTypes, false, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = itemKindOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = itemKindTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testItemKindsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testItemKindsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(itemKindColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testItemKindToManyKindItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ItemKind
	var b, c Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, itemDBTypes, false, itemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, itemDBTypes, false, itemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.KindID, a.ID)
	queries.Assign(&c.KindID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.KindItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.KindID, b.KindID) {
			bFound = true
		}
		if queries.Equal(v.KindID, c.KindID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ItemKindSlice{&a}
	if err = a.L.LoadKindItems(ctx, tx, false, (*[]*ItemKind)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.KindItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.KindItems = nil
	if err = a.L.LoadKindItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.KindItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testItemKindToManyOptionKinds(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ItemKind
	var b, c OptionKind

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, optionKindDBTypes, false, optionKindColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optionKindDBTypes, false, optionKindColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ItemKindID, a.ID)
	queries.Assign(&c.ItemKindID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OptionKinds().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ItemKindID, b.ItemKindID) {
			bFound = true
		}
		if queries.Equal(v.ItemKindID, c.ItemKindID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ItemKindSlice{&a}
	if err = a.L.LoadOptionKinds(ctx, tx, false, (*[]*ItemKind)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OptionKinds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OptionKinds = nil
	if err = a.L.LoadOptionKinds(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OptionKinds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testItemKindToManyAddOpKindItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ItemKind
	var b, c, d, e Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, itemKindDBTypes, false, strmangle.SetComplement(itemKindPrimaryKeyColumns, itemKindColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Item{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Item{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddKindItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.KindID) {
			t.Error("foreign key was wrong value", a.ID, first.KindID)
		}
		if !queries.Equal(a.ID, second.KindID) {
			t.Error("foreign key was wrong value", a.ID, second.KindID)
		}

		if first.R.Kind != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Kind != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.KindItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.KindItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.KindItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testItemKindToManyAddOpOptionKinds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ItemKind
	var b, c, d, e OptionKind

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, itemKindDBTypes, false, strmangle.SetComplement(itemKindPrimaryKeyColumns, itemKindColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OptionKind{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, optionKindDBTypes, false, strmangle.SetComplement(optionKindPrimaryKeyColumns, optionKindColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OptionKind{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOptionKinds(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ItemKindID) {
			t.Error("foreign key was wrong value", a.ID, first.ItemKindID)
		}
		if !queries.Equal(a.ID, second.ItemKindID) {
			t.Error("foreign key was wrong value", a.ID, second.ItemKindID)
		}

		if first.R.ItemKind != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ItemKind != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OptionKinds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OptionKinds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OptionKinds().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testItemKindsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testItemKindsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ItemKindSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testItemKindsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ItemKinds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	itemKindDBTypes = map[string]string{`ID`: `INTEGER`, `Deleted`: `INTEGER`, `Name`: `TEXT`}
	_               = bytes.MinRead
)

func testItemKindsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(itemKindPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(itemKindAllColumns) == len(itemKindPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testItemKindsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(itemKindAllColumns) == len(itemKindPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ItemKind{}
	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ItemKinds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, itemKindDBTypes, true, itemKindPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ItemKind struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(itemKindAllColumns, itemKindPrimaryKeyColumns) {
		fields = itemKindAllColumns
	} else {
		fields = strmangle.SetComplement(
			itemKindAllColumns,
			itemKindPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ItemKindSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
