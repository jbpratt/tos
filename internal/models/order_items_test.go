// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderItems(t *testing.T) {
	t.Parallel()

	query := OrderItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderItemExists to return true, but got false.")
	}
}

func testOrderItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderItemFound, err := FindOrderItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderItemOne := &OrderItem{}
	orderItemTwo := &OrderItem{}
	if err = randomize.Struct(seed, orderItemOne, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err = randomize.Struct(seed, orderItemTwo, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderItemOne := &OrderItem{}
	orderItemTwo := &OrderItem{}
	if err = randomize.Struct(seed, orderItemOne, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err = randomize.Struct(seed, orderItemTwo, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOrderItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderItemToManyOrderItemOptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c OrderItemOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OrderItemID, a.ID)
	queries.Assign(&c.OrderItemID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderItemOptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OrderItemID, b.OrderItemID) {
			bFound = true
		}
		if queries.Equal(v.OrderItemID, c.OrderItemID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderItemSlice{&a}
	if err = a.L.LoadOrderItemOptions(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderItemOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderItemOptions = nil
	if err = a.L.LoadOrderItemOptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderItemOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderItemToManyMainOrderItemOrderItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MainOrderItemID, a.ID)
	queries.Assign(&c.MainOrderItemID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MainOrderItemOrderItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MainOrderItemID, b.MainOrderItemID) {
			bFound = true
		}
		if queries.Equal(v.MainOrderItemID, c.MainOrderItemID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderItemSlice{&a}
	if err = a.L.LoadMainOrderItemOrderItems(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MainOrderItemOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MainOrderItemOrderItems = nil
	if err = a.L.LoadMainOrderItemOrderItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MainOrderItemOrderItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderItemToManyAddOpOrderItemOptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c, d, e OrderItemOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItemOption{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemOptionDBTypes, false, strmangle.SetComplement(orderItemOptionPrimaryKeyColumns, orderItemOptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderItemOption{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderItemOptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OrderItemID) {
			t.Error("foreign key was wrong value", a.ID, first.OrderItemID)
		}
		if !queries.Equal(a.ID, second.OrderItemID) {
			t.Error("foreign key was wrong value", a.ID, second.OrderItemID)
		}

		if first.R.OrderItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderItemOptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderItemOptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderItemOptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrderItemToManyAddOpMainOrderItemOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c, d, e OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMainOrderItemOrderItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MainOrderItemID) {
			t.Error("foreign key was wrong value", a.ID, first.MainOrderItemID)
		}
		if !queries.Equal(a.ID, second.MainOrderItemID) {
			t.Error("foreign key was wrong value", a.ID, second.MainOrderItemID)
		}

		if first.R.MainOrderItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MainOrderItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MainOrderItemOrderItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MainOrderItemOrderItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MainOrderItemOrderItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderItemToManySetOpMainOrderItemOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c, d, e OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMainOrderItemOrderItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MainOrderItemOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMainOrderItemOrderItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MainOrderItemOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MainOrderItemID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MainOrderItemID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MainOrderItemID) {
		t.Error("foreign key was wrong value", a.ID, d.MainOrderItemID)
	}
	if !queries.Equal(a.ID, e.MainOrderItemID) {
		t.Error("foreign key was wrong value", a.ID, e.MainOrderItemID)
	}

	if b.R.MainOrderItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MainOrderItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MainOrderItem != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MainOrderItem != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MainOrderItemOrderItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MainOrderItemOrderItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderItemToManyRemoveOpMainOrderItemOrderItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c, d, e OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMainOrderItemOrderItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MainOrderItemOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMainOrderItemOrderItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MainOrderItemOrderItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MainOrderItemID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MainOrderItemID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MainOrderItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MainOrderItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MainOrderItem != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MainOrderItem != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MainOrderItemOrderItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MainOrderItemOrderItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MainOrderItemOrderItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderItemToOneOrderItemUsingMainOrderItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItem
	var foreign OrderItem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MainOrderItemID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MainOrderItem().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderItemSlice{&local}
	if err = local.L.LoadMainOrderItem(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MainOrderItem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MainOrderItem = nil
	if err = local.L.LoadMainOrderItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MainOrderItem == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemToOneItemUsingItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItem
	var foreign Item

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, itemDBTypes, true, itemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Item struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ItemID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Item().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderItemSlice{&local}
	if err = local.L.LoadItem(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Item == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Item = nil
	if err = local.L.LoadItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Item == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderItem
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderItemDBTypes, false, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrderItemSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*OrderItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderItemToOneSetOpOrderItemUsingMainOrderItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrderItem{&b, &c} {
		err = a.SetMainOrderItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MainOrderItem != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MainOrderItemOrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MainOrderItemID, x.ID) {
			t.Error("foreign key was wrong value", a.MainOrderItemID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MainOrderItemID))
		reflect.Indirect(reflect.ValueOf(&a.MainOrderItemID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MainOrderItemID, x.ID) {
			t.Error("foreign key was wrong value", a.MainOrderItemID, x.ID)
		}
	}
}

func testOrderItemToOneRemoveOpOrderItemUsingMainOrderItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b OrderItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMainOrderItem(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMainOrderItem(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MainOrderItem().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MainOrderItem != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MainOrderItemID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MainOrderItemOrderItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderItemToOneSetOpItemUsingItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c Item

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, itemDBTypes, false, strmangle.SetComplement(itemPrimaryKeyColumns, itemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Item{&b, &c} {
		err = a.SetItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Item != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ItemID, x.ID) {
			t.Error("foreign key was wrong value", a.ItemID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ItemID))
		reflect.Indirect(reflect.ValueOf(&a.ItemID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ItemID, x.ID) {
			t.Error("foreign key was wrong value", a.ItemID, x.ID)
		}
	}
}
func testOrderItemToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderItem
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderItemDBTypes, false, strmangle.SetComplement(orderItemPrimaryKeyColumns, orderItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testOrderItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderItemDBTypes = map[string]string{`ID`: `INTEGER`, `OrderID`: `INTEGER`, `ItemID`: `INTEGER`, `MainOrderItemID`: `INTEGER`, `Price`: `INTEGER`}
	_                = bytes.MinRead
)

func testOrderItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderItemAllColumns) == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderItemAllColumns) == len(orderItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderItem{}
	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderItemDBTypes, true, orderItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderItemAllColumns, orderItemPrimaryKeyColumns) {
		fields = orderItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderItemAllColumns,
			orderItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
