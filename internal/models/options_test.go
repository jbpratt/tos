// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOptions(t *testing.T) {
	t.Parallel()

	query := Options()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Options().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OptionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OptionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Option exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OptionExists to return true, but got false.")
	}
}

func testOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	optionFound, err := FindOption(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if optionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Options().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Options().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	optionOne := &Option{}
	optionTwo := &Option{}
	if err = randomize.Struct(seed, optionOne, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}
	if err = randomize.Struct(seed, optionTwo, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = optionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = optionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Options().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	optionOne := &Option{}
	optionTwo := &Option{}
	if err = randomize.Struct(seed, optionOne, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}
	if err = randomize.Struct(seed, optionTwo, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = optionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = optionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(optionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOptionOneToOneItemOptionUsingItemOption(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign ItemOption
	var local Option

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, itemOptionDBTypes, true, itemOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ItemOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.OptionID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ItemOption().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.OptionID, foreign.OptionID) {
		t.Errorf("want: %v, got %v", foreign.OptionID, check.OptionID)
	}

	slice := OptionSlice{&local}
	if err = local.L.LoadItemOption(ctx, tx, false, (*[]*Option)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ItemOption == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ItemOption = nil
	if err = local.L.LoadItemOption(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ItemOption == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOptionOneToOneSetOpItemOptionUsingItemOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Option
	var b, c ItemOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, itemOptionDBTypes, false, strmangle.SetComplement(itemOptionPrimaryKeyColumns, itemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, itemOptionDBTypes, false, strmangle.SetComplement(itemOptionPrimaryKeyColumns, itemOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ItemOption{&b, &c} {
		err = a.SetItemOption(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ItemOption != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Option != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.OptionID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := ItemOptionExists(ctx, tx, x.ItemID, x.OptionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if !queries.Equal(a.ID, x.OptionID) {
			t.Error("foreign key was wrong value", a.ID, x.OptionID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testOptionToManyOrderItemOptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Option
	var b, c OrderItemOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderItemOptionDBTypes, false, orderItemOptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OptionID, a.ID)
	queries.Assign(&c.OptionID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderItemOptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OptionID, b.OptionID) {
			bFound = true
		}
		if queries.Equal(v.OptionID, c.OptionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OptionSlice{&a}
	if err = a.L.LoadOrderItemOptions(ctx, tx, false, (*[]*Option)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderItemOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderItemOptions = nil
	if err = a.L.LoadOrderItemOptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderItemOptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOptionToManyAddOpOrderItemOptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Option
	var b, c, d, e OrderItemOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderItemOption{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderItemOptionDBTypes, false, strmangle.SetComplement(orderItemOptionPrimaryKeyColumns, orderItemOptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderItemOption{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderItemOptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OptionID) {
			t.Error("foreign key was wrong value", a.ID, first.OptionID)
		}
		if !queries.Equal(a.ID, second.OptionID) {
			t.Error("foreign key was wrong value", a.ID, second.OptionID)
		}

		if first.R.Option != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Option != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderItemOptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderItemOptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderItemOptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOptionToOneOptionKindUsingKind(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Option
	var foreign OptionKind

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, optionDBTypes, false, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, optionKindDBTypes, true, optionKindColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OptionKind struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.KindID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Kind().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OptionSlice{&local}
	if err = local.L.LoadKind(ctx, tx, false, (*[]*Option)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Kind == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Kind = nil
	if err = local.L.LoadKind(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Kind == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOptionToOneSetOpOptionKindUsingKind(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Option
	var b, c OptionKind

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, optionDBTypes, false, strmangle.SetComplement(optionPrimaryKeyColumns, optionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, optionKindDBTypes, false, strmangle.SetComplement(optionKindPrimaryKeyColumns, optionKindColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, optionKindDBTypes, false, strmangle.SetComplement(optionKindPrimaryKeyColumns, optionKindColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OptionKind{&b, &c} {
		err = a.SetKind(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Kind != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.KindOptions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.KindID, x.ID) {
			t.Error("foreign key was wrong value", a.KindID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.KindID))
		reflect.Indirect(reflect.ValueOf(&a.KindID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.KindID, x.ID) {
			t.Error("foreign key was wrong value", a.KindID, x.ID)
		}
	}
}

func testOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OptionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Options().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	optionDBTypes = map[string]string{`ID`: `INTEGER`, `Deleted`: `INTEGER`, `Available`: `INTEGER`, `KindID`: `INTEGER`, `Name`: `TEXT`, `Price`: `INTEGER`, `LightPrice`: `INTEGER`, `HeavyPrice`: `INTEGER`}
	_             = bytes.MinRead
)

func testOptionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(optionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(optionAllColumns) == len(optionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, optionDBTypes, true, optionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(optionAllColumns) == len(optionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Option{}
	if err = randomize.Struct(seed, o, optionDBTypes, true, optionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Options().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, optionDBTypes, true, optionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Option struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(optionAllColumns, optionPrimaryKeyColumns) {
		fields = optionAllColumns
	} else {
		fields = strmangle.SetComplement(
			optionAllColumns,
			optionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OptionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
