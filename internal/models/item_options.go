// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ItemOption is an object representing the database table.
type ItemOption struct {
	ItemID     int64      `boil:"item_id" json:"itemID" toml:"itemID" yaml:"itemID"`
	OptionID   int64      `boil:"option_id" json:"optionID" toml:"optionID" yaml:"optionID"`
	IsDefault  null.Int64 `boil:"is_default" json:"isDefault,omitempty" toml:"isDefault" yaml:"isDefault,omitempty"`
	Price      null.Int64 `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	LightPrice null.Int64 `boil:"light_price" json:"lightPrice,omitempty" toml:"lightPrice" yaml:"lightPrice,omitempty"`
	HeavyPrice null.Int64 `boil:"heavy_price" json:"heavyPrice,omitempty" toml:"heavyPrice" yaml:"heavyPrice,omitempty"`

	R *itemOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L itemOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ItemOptionColumns = struct {
	ItemID     string
	OptionID   string
	IsDefault  string
	Price      string
	LightPrice string
	HeavyPrice string
}{
	ItemID:     "item_id",
	OptionID:   "option_id",
	IsDefault:  "is_default",
	Price:      "price",
	LightPrice: "light_price",
	HeavyPrice: "heavy_price",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ItemOptionWhere = struct {
	ItemID     whereHelperint64
	OptionID   whereHelperint64
	IsDefault  whereHelpernull_Int64
	Price      whereHelpernull_Int64
	LightPrice whereHelpernull_Int64
	HeavyPrice whereHelpernull_Int64
}{
	ItemID:     whereHelperint64{field: "\"item_options\".\"item_id\""},
	OptionID:   whereHelperint64{field: "\"item_options\".\"option_id\""},
	IsDefault:  whereHelpernull_Int64{field: "\"item_options\".\"is_default\""},
	Price:      whereHelpernull_Int64{field: "\"item_options\".\"price\""},
	LightPrice: whereHelpernull_Int64{field: "\"item_options\".\"light_price\""},
	HeavyPrice: whereHelpernull_Int64{field: "\"item_options\".\"heavy_price\""},
}

// ItemOptionRels is where relationship names are stored.
var ItemOptionRels = struct {
	Option string
	Item   string
}{
	Option: "Option",
	Item:   "Item",
}

// itemOptionR is where relationships are stored.
type itemOptionR struct {
	Option *Option `boil:"Option" json:"Option" toml:"Option" yaml:"Option"`
	Item   *Item   `boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
}

// NewStruct creates a new relationship struct
func (*itemOptionR) NewStruct() *itemOptionR {
	return &itemOptionR{}
}

// itemOptionL is where Load methods for each relationship are stored.
type itemOptionL struct{}

var (
	itemOptionAllColumns            = []string{"item_id", "option_id", "is_default", "price", "light_price", "heavy_price"}
	itemOptionColumnsWithoutDefault = []string{"option_id", "price", "light_price", "heavy_price"}
	itemOptionColumnsWithDefault    = []string{"item_id", "is_default"}
	itemOptionPrimaryKeyColumns     = []string{"item_id", "option_id"}
)

type (
	// ItemOptionSlice is an alias for a slice of pointers to ItemOption.
	// This should generally be used opposed to []ItemOption.
	ItemOptionSlice []*ItemOption

	itemOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	itemOptionType                 = reflect.TypeOf(&ItemOption{})
	itemOptionMapping              = queries.MakeStructMapping(itemOptionType)
	itemOptionPrimaryKeyMapping, _ = queries.BindMapping(itemOptionType, itemOptionMapping, itemOptionPrimaryKeyColumns)
	itemOptionInsertCacheMut       sync.RWMutex
	itemOptionInsertCache          = make(map[string]insertCache)
	itemOptionUpdateCacheMut       sync.RWMutex
	itemOptionUpdateCache          = make(map[string]updateCache)
	itemOptionUpsertCacheMut       sync.RWMutex
	itemOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single itemOption record from the query using the global executor.
func (q itemOptionQuery) OneG(ctx context.Context) (*ItemOption, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single itemOption record from the query.
func (q itemOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ItemOption, error) {
	o := &ItemOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for item_options")
	}

	return o, nil
}

// AllG returns all ItemOption records from the query using the global executor.
func (q itemOptionQuery) AllG(ctx context.Context) (ItemOptionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ItemOption records from the query.
func (q itemOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ItemOptionSlice, error) {
	var o []*ItemOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ItemOption slice")
	}

	return o, nil
}

// CountG returns the count of all ItemOption records in the query, and panics on error.
func (q itemOptionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ItemOption records in the query.
func (q itemOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count item_options rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q itemOptionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q itemOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if item_options exists")
	}

	return count > 0, nil
}

// Option pointed to by the foreign key.
func (o *ItemOption) Option(mods ...qm.QueryMod) optionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OptionID),
	}

	queryMods = append(queryMods, mods...)

	query := Options(queryMods...)
	queries.SetFrom(query.Query, "\"options\"")

	return query
}

// Item pointed to by the foreign key.
func (o *ItemOption) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	query := Items(queryMods...)
	queries.SetFrom(query.Query, "\"items\"")

	return query
}

// LoadOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemOptionL) LoadOption(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItemOption interface{}, mods queries.Applicator) error {
	var slice []*ItemOption
	var object *ItemOption

	if singular {
		object = maybeItemOption.(*ItemOption)
	} else {
		slice = *maybeItemOption.(*[]*ItemOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemOptionR{}
		}
		if !queries.IsNil(object.OptionID) {
			args = append(args, object.OptionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OptionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OptionID) {
				args = append(args, obj.OptionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`options`),
		qm.WhereIn(`options.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Option")
	}

	var resultSlice []*Option
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Option")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for options")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Option = foreign
		if foreign.R == nil {
			foreign.R = &optionR{}
		}
		foreign.R.ItemOption = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OptionID, foreign.ID) {
				local.R.Option = foreign
				if foreign.R == nil {
					foreign.R = &optionR{}
				}
				foreign.R.ItemOption = local
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemOptionL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeItemOption interface{}, mods queries.Applicator) error {
	var slice []*ItemOption
	var object *ItemOption

	if singular {
		object = maybeItemOption.(*ItemOption)
	} else {
		slice = *maybeItemOption.(*[]*ItemOption)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemOptionR{}
		}
		if !queries.IsNil(object.ItemID) {
			args = append(args, object.ItemID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemOptionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ItemID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ItemID) {
				args = append(args, obj.ItemID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`items`),
		qm.WhereIn(`items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.ItemOption = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ItemID, foreign.ID) {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.ItemOption = local
				break
			}
		}
	}

	return nil
}

// SetOptionG of the itemOption to the related item.
// Sets o.R.Option to related.
// Adds o to related.R.ItemOption.
// Uses the global database handle.
func (o *ItemOption) SetOptionG(ctx context.Context, insert bool, related *Option) error {
	return o.SetOption(ctx, boil.GetContextDB(), insert, related)
}

// SetOption of the itemOption to the related item.
// Sets o.R.Option to related.
// Adds o to related.R.ItemOption.
func (o *ItemOption) SetOption(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Option) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"option_id"}),
		strmangle.WhereClause("\"", "\"", 0, itemOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ItemID, o.OptionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OptionID, related.ID)
	if o.R == nil {
		o.R = &itemOptionR{
			Option: related,
		}
	} else {
		o.R.Option = related
	}

	if related.R == nil {
		related.R = &optionR{
			ItemOption: o,
		}
	} else {
		related.R.ItemOption = o
	}

	return nil
}

// SetItemG of the itemOption to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.ItemOption.
// Uses the global database handle.
func (o *ItemOption) SetItemG(ctx context.Context, insert bool, related *Item) error {
	return o.SetItem(ctx, boil.GetContextDB(), insert, related)
}

// SetItem of the itemOption to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.ItemOption.
func (o *ItemOption) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 0, itemOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ItemID, o.OptionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ItemID, related.ID)
	if o.R == nil {
		o.R = &itemOptionR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			ItemOption: o,
		}
	} else {
		related.R.ItemOption = o
	}

	return nil
}

// ItemOptions retrieves all the records using an executor.
func ItemOptions(mods ...qm.QueryMod) itemOptionQuery {
	mods = append(mods, qm.From("\"item_options\""))
	return itemOptionQuery{NewQuery(mods...)}
}

// FindItemOptionG retrieves a single record by ID.
func FindItemOptionG(ctx context.Context, itemID int64, optionID int64, selectCols ...string) (*ItemOption, error) {
	return FindItemOption(ctx, boil.GetContextDB(), itemID, optionID, selectCols...)
}

// FindItemOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindItemOption(ctx context.Context, exec boil.ContextExecutor, itemID int64, optionID int64, selectCols ...string) (*ItemOption, error) {
	itemOptionObj := &ItemOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"item_options\" where \"item_id\"=? AND \"option_id\"=?", sel,
	)

	q := queries.Raw(query, itemID, optionID)

	err := q.Bind(ctx, exec, itemOptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from item_options")
	}

	return itemOptionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ItemOption) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ItemOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no item_options provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(itemOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	itemOptionInsertCacheMut.RLock()
	cache, cached := itemOptionInsertCache[key]
	itemOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			itemOptionAllColumns,
			itemOptionColumnsWithDefault,
			itemOptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(itemOptionType, itemOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(itemOptionType, itemOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"item_options\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"item_options\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"item_options\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, itemOptionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into item_options")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ItemID,
		o.OptionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for item_options")
	}

CacheNoHooks:
	if !cached {
		itemOptionInsertCacheMut.Lock()
		itemOptionInsertCache[key] = cache
		itemOptionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ItemOption record using the global executor.
// See Update for more documentation.
func (o *ItemOption) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ItemOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ItemOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	itemOptionUpdateCacheMut.RLock()
	cache, cached := itemOptionUpdateCache[key]
	itemOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			itemOptionAllColumns,
			itemOptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update item_options, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"item_options\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, itemOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(itemOptionType, itemOptionMapping, append(wl, itemOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update item_options row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for item_options")
	}

	if !cached {
		itemOptionUpdateCacheMut.Lock()
		itemOptionUpdateCache[key] = cache
		itemOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q itemOptionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q itemOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for item_options")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ItemOptionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ItemOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"item_options\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, itemOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in itemOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all itemOption")
	}
	return rowsAff, nil
}

// DeleteG deletes a single ItemOption record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ItemOption) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ItemOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ItemOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ItemOption provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), itemOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"item_options\" WHERE \"item_id\"=? AND \"option_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for item_options")
	}

	return rowsAff, nil
}

func (q itemOptionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q itemOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no itemOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from item_options")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for item_options")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ItemOptionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ItemOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"item_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, itemOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from itemOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for item_options")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ItemOption) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ItemOption provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ItemOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindItemOption(ctx, exec, o.ItemID, o.OptionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemOptionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ItemOptionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ItemOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"item_options\".* FROM \"item_options\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, itemOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ItemOptionSlice")
	}

	*o = slice

	return nil
}

// ItemOptionExistsG checks if the ItemOption row exists.
func ItemOptionExistsG(ctx context.Context, itemID int64, optionID int64) (bool, error) {
	return ItemOptionExists(ctx, boil.GetContextDB(), itemID, optionID)
}

// ItemOptionExists checks if the ItemOption row exists.
func ItemOptionExists(ctx context.Context, exec boil.ContextExecutor, itemID int64, optionID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"item_options\" where \"item_id\"=? AND \"option_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, itemID, optionID)
	}
	row := exec.QueryRowContext(ctx, sql, itemID, optionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if item_options exists")
	}

	return exists, nil
}
