syntax = "proto3";

package mookiespb;

message Item {
  string name = 1;
  int32 id = 2;
  float price = 3;
  // @inject_tag: db:"category_id"
  int32 categoryID = 4;
  // @inject_tag: db:"order_item_id"
  int32 orderItemID = 5;
  repeated Option options = 6;
}

message Option {
  string name = 1;
  int32 id = 2;
  float price = 3;
  bool selected = 4;
}

message Category {
  string name = 1;
  int32 id = 2;
  repeated Item items = 3;
}

message Menu {  
  repeated Category categories = 1;
}

message Order {
  int32 id = 1;
  string name = 2;
  repeated Item items = 3;
  float total = 4;
  string status = 5;
  // @inject_tag: db:"time_ordered"
  string time_ordered = 6;
  // @inject_tag: db:"time_complete"
  string time_complete = 7;
} 
  
message SubmitOrderRequest {
 Order order = 1;
}

message SubmitOrderResponse {
  string result = 1;
}

message SubscribeToOrderRequest {
  string request = 1;
}

message CompleteOrderRequest {
  int32 id = 1;
}

message CompleteOrderResponse {
  string result = 1;
}

message OrdersRequest {
  string request = 1;
}

message OrdersResponse {
  repeated Order orders = 1;
}

message Empty {

}

message CreateMenuItemRequest {
  Item item = 1;
}

message CreateMenuItemResponse {
  string result = 1;
}

message UpdateMenuItemRequest {
  Item item = 1;
}

message UpdateMenuItemResponse {
  string result = 1;
}

message DeleteMenuItemRequest {
  int32 id = 1;
}

message DeleteMenuItemResponse {
  string result = 1;
}

message CreateMenuItemOptionRequest {
  Option option = 1;
}

message CreateMenuItemOptionResponse {
  string result = 1;
}

// All unary requests
service MenuService{
  rpc GetMenu(Empty) returns (Menu) {};

  rpc CreateMenuItem(CreateMenuItemRequest) returns (CreateMenuItemResponse) {};

  rpc UpdateMenuItem(UpdateMenuItemRequest) returns (UpdateMenuItemResponse) {};

  rpc DeleteMenuItem(DeleteMenuItemRequest) returns (DeleteMenuItemResponse) {};

  rpc CreateMenuItemOption(CreateMenuItemOptionRequest) returns (CreateMenuItemOptionResponse) {};
}

service OrderService {
  // Unary 
  rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderResponse) {};

  // validate order can be unary

  // completeorder unary
  rpc CompleteOrder(CompleteOrderRequest) returns (CompleteOrderResponse) {};

  // server streaming
  rpc SubscribeToOrders(Empty) returns (stream Order) {};

  rpc SubscribeToCompleteOrders(Empty) returns (stream Order) {};
  // all active orders
  rpc ActiveOrders(Empty) returns (OrdersResponse) {};
}

